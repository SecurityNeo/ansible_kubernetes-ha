- name: Create kubelet lib dir
  file:
    path=/var/lib/kubelet
    state=directory

- name: Distribute binary file
  copy:
    src={{ local_package_dir }}/kubernetes/server/bin/
    dest={{ package_dir }}/bin/
    owner={{ k8s_user }}
    mode=0755

- name: Copy gen_kubelet_bootstrap.sh
  template:
    src=templates/gen_kubelet_bootstrap.sh.j2
    dest={{ local_template_dir }}/gen_kubelet_bootstrap.sh
    mode=0755
  connection: local
  run_once: yes

- name: Generate kubelet bootstrap file
  shell:
    sh {{ local_template_dir }}/gen_kubelet_bootstrap.sh
  connection: local
  run_once: yes

- name: Distribute kubelet file to user k8s
  copy:
    src={{ local_template_dir }}/kubelet-bootstrap-{{ node_name }}.kubeconfig
    dest={{ kubernetes_conf_dir }}/kubelet-bootstrap.kubeconfig
    owner={{ k8s_user }}

- name: Distribute kubelet parameter config file
  template:
    src=templates/kubelet.config.json.j2
    dest={{ kubernetes_conf_dir }}/kubelet.config.json

- name: Distribute kubelet service file
  template:
    src=templates/kubelet.service.j2
    dest=/etc/systemd/system/kubelet.service

- name: Create clusterrole binding
  shell:
    kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers
  run_once: yes
  ignore_errors: yes

- name: Start kubelet service
  service:
    name=kubelet
    state=started
    enabled=yes

- name: Copy csr-crb file
  copy:
    src=templates/csr-crb.yaml.template
    dest={{ package_dir }}/csr-crb.yaml

- name: Apply csr-crb
  shell:
    kubectl apply -f {{ package_dir }}/csr-crb.yaml
  run_once: yes
  ignore_errors: yes
